diff -ruN pml-2.03.old/pmlsrc/bits/huge_val.h pml-2.03/pmlsrc/bits/huge_val.h
--- pml-2.03.old/pmlsrc/bits/huge_val.h	1970-01-01 01:00:00.000000000 +0100
+++ pml-2.03/pmlsrc/bits/huge_val.h	2020-05-03 23:24:11.095803559 +0200
@@ -0,0 +1,75 @@
+/* `HUGE_VAL' constants for m68k (where it is infinity).
+   Used by <stdlib.h> and <math.h> functions for overflow.
+   Copyright (C) 1992, 1995, 1996, 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public License as
+   published by the Free Software Foundation; either version 2 of the
+   License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public
+   License along with the GNU C Library; see the file COPYING.LIB.  If not,
+   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+#ifndef _MATH_H
+# error "Never use <bits/huge_val.h> directly; include <math.h> instead."
+#endif
+
+
+#include <features.h>
+#include <sys/cdefs.h>
+
+/* IEEE positive infinity (-HUGE_VAL is negative infinity).  */
+
+#ifdef	__GNUC__
+
+# define HUGE_VAL					\
+  (__extension__					\
+   ((union { unsigned long long __l; double __d; })	\
+    { __l: 0x7ff0000000000000ULL }).__d)
+
+#else /* not GCC */
+
+static union { unsigned char __c[8]; double __d; } __huge_val =
+  { { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 } };
+# define HUGE_VAL	(__huge_val.__d)
+
+#endif	/* GCC.  */
+
+
+/* ISO C 9X extensions: (float) HUGE_VALF and (long double) HUGE_VALL.  */
+
+#ifdef __USE_ISOC99
+
+# ifdef __GNUC__
+
+#  define HUGE_VALF					\
+  (__extension__					\
+   ((union { unsigned long __l; float __f; })		\
+    { __l: 0x7f800000UL }).__f)
+
+#  define HUGE_VALL					\
+  (__extension__					\
+   ((union { unsigned long __l[3]; long double __ld; })	\
+    { __l: { 0x7fff0000UL, 0x80000000UL, 0UL } }).__ld)
+
+# else /* not GCC */
+
+static union { unsigned char __c[4]; float __f; } __huge_valf =
+  { { 0x7f, 0x80, 0, 0 } };
+#  define HUGE_VALF	(__huge_valf.__f)
+
+static union { unsigned char __c[12]; long double __ld; } __huge_vall =
+  { { 0x7f, 0xff, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0 } };
+#  define HUGE_VALL	(__huge_vall.__ld)
+
+# endif	/* GCC.  */
+
+#endif	/* __USE_ISOC99.  */
diff -ruN pml-2.03.old/pmlsrc/bits/mathdef.h pml-2.03/pmlsrc/bits/mathdef.h
--- pml-2.03.old/pmlsrc/bits/mathdef.h	1970-01-01 01:00:00.000000000 +0100
+++ pml-2.03/pmlsrc/bits/mathdef.h	2020-05-03 23:24:11.095803559 +0200
@@ -0,0 +1,41 @@
+/* Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#if !defined _MATH_H && !defined _COMPLEX_H
+# error "Never use <bits/mathdef.h> directly; include <math.h> instead"
+#endif
+
+#if defined __USE_ISOC99 && defined _MATH_H && !defined _MATH_H_MATHDEF
+# define _MATH_H_MATHDEF	1
+
+/* The m68k FPUs evaluate all values in the 96 bit floating-point format
+   which is also available for the user as `long double'.  Therefore we
+   define: */
+typedef long double float_t;	/* `float' expressions are evaluated as
+				   `long double'.  */
+typedef long double double_t;	/* `double' expressions are evaluated as
+				   `long double'.  */
+
+/* Define `INFINITY' as value of type `float'.  */
+# define INFINITY	HUGE_VALF
+
+/* The values returned by `ilogb' for 0 and NaN respectively.  */
+# define FP_ILOGB0	(-2147483647 - 1)
+# define FP_ILOGBNAN	(2147483647)
+
+#endif	/* ISO C99 */
diff -ruN pml-2.03.old/pmlsrc/bits/nan.h pml-2.03/pmlsrc/bits/nan.h
--- pml-2.03.old/pmlsrc/bits/nan.h	1970-01-01 01:00:00.000000000 +0100
+++ pml-2.03/pmlsrc/bits/nan.h	2020-05-03 23:24:11.095803559 +0200
@@ -0,0 +1,48 @@
+/* `NAN' constant for IEEE 754 machines.
+   Copyright (C) 1992, 1996, 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _MATH_H
+# error "Never use <bits/nan.h> directly; include <math.h> instead."
+#endif
+
+
+/* IEEE Not A Number.  */
+
+#ifdef	__GNUC__
+
+# define NAN \
+  (__extension__                                                            \
+   ((union { unsigned __l __attribute__((__mode__(__SI__))); float __d; })  \
+    { __l: 0x7fc00000UL }).__d)
+
+#else
+
+# include <endian.h>
+
+# if __BYTE_ORDER == __BIG_ENDIAN
+#  define __nan_bytes		{ 0x7f, 0xc0, 0, 0 }
+# endif
+# if __BYTE_ORDER == __LITTLE_ENDIAN
+#  define __nan_bytes		{ 0, 0, 0xc0, 0x7f }
+# endif
+
+static union { unsigned char __c[4]; float __d; } __nan_union = { __nan_bytes };
+# define NAN	(__nan_union.__d)
+
+#endif	/* GCC.  */
diff -ruN pml-2.03.old/pmlsrc/Makefile pml-2.03/pmlsrc/Makefile
--- pml-2.03.old/pmlsrc/Makefile	2020-05-03 23:23:47.502170624 +0200
+++ pml-2.03/pmlsrc/Makefile	2020-05-03 23:25:39.113420927 +0200
@@ -31,6 +31,8 @@
 endif
 	mkdir -p $(CROSSINC)
 	cp math.h $(CROSSINC)
+	mkdir -p $(CROSSINC)/bits
+	cp bits/nan.h bits/huge_val.h bits/mathdef.h $(CROSSINC)/bits
 
 clean:
 	$(MAKE) -f Makefile.32 clean
